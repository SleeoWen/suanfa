/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }


 /**
 * @param {number[]} inorder
 * @param {number[]} postorder
 * @return {TreeNode}
 */
var buildTree = function (inorder, postorder) {
  const rootValue = postorder.pop();
  const index = inorder.indexOf(rootValue);
  const root = new TreeNode(rootValue);
  root.left = buildTree(inorder.slice(0, index), postorder.slice(0, index))
  root.right = buildTree(inorder.slice(index + 1), postorder.slice(index))
  return root;
};

//runtime_error:Line 18 in solution.js
  const root = new TreeNode(rootValue);
               ^
RangeError: Maximum call stack size exceeded
    Line 18: Char 16 in solution.js (buildTree)
    Line 19: Char 15 in solution.js (buildTree)
    Line 19: Char 15 in solution.js (buildTree)
    Line 19: Char 15 in solution.js (buildTree)
    Line 19: Char 15 in solution.js (buildTree)
    Line 19: Char 15 in solution.js (buildTree)
    Line 19: Char 15 in solution.js (buildTree)
    Line 19: Char 15 in solution.js (buildTree)
    Line 19: Char 15 in solution.js (buildTree)
    Line 19: Char 15 in solution.js (buildTree)
Node.js v20.10.0
//last_testcase:[9,3,15,20,7] [9,15,7,20,3]
