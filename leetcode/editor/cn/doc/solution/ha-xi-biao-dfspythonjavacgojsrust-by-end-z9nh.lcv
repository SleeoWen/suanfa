![lc721-cut.png](https://pic.leetcode.cn/1721006607-hZyyQx-lc721-cut.png)

看示例 1，把每个账户用其在 $\textit{accounts}$ 中的下标表示，即节点 $0$ 到 $3$。

同时，把每个账户的邮箱地址，也视作节点。我们在**账户下标**与其**邮箱地址**之间连边，得到一个**无向图**（二分图）。

题目相当于求出这个图的每个**连通块**，这可以用 **DFS** 解决。

### 算法

1. 把 $\textit{accounts}$ 中的信息提取到哈希表 $\textit{emailToIdx}$ 中，key 为邮箱地址，value 为这个邮箱对应的账户下标列表。
2. 初始化一个长为 $n$ 的全为 $\texttt{false}$ 的布尔数组 $\textit{vis}$，用来标记访问过的账户下标。
3. 遍历 $\textit{vis}$，如果 $i$ 没有访问过，即 $\textit{vis}[i]=\texttt{false}$，则从 $i$ 开始 DFS。
   1. DFS 之前，创建一个哈希集合 $\textit{emails}$，用来保存 DFS 中访问到的邮箱地址。
   2. 开始 DFS。首先标记 $\textit{vis}[i]=\texttt{true}$。
   3. 遍历 $\textit{accounts}[i]$ 的邮箱地址 $\textit{email}$。
   4. 如果 $\textit{email}$ 在哈希集合 $\textit{emails}$ 中，则跳过；否则把 $\textit{email}$ 加入哈希集合 $\textit{emails}$。
   5. 遍历 $\textit{emailToIdx}[\textit{email}]$，也就是所有包含该邮箱地址的账户下标 $j$，如果 $j$ 没有访问过，即 $\textit{vis}[j]=\texttt{false}$，则继续 DFS $j$。
4. DFS 结束后，把 $\textit{emails}$ 中的元素按照字典序从小到大排序，然后和 $\textit{accounts}[i][0]$ 一起加入答案。
5. 返回答案。

* [sol-Python3]

```py
class Solution:
    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:
        email_to_idx = defaultdict(list)
        for i, account in enumerate(accounts):
            for email in account[1:]:
                email_to_idx[email].append(i)

        def dfs(i: int) -> None:
            vis[i] = True
            for email in accounts[i][1:]:
                if email in email_set:
                    continue
                email_set.add(email)
                for j in email_to_idx[email]:  # 遍历所有包含该邮箱地址的账户下标 j
                    if not vis[j]:  # j 没有访问过
                        dfs(j)

        ans = []
        vis = [False] * len(accounts)
        for i, b in enumerate(vis):
            if not b:  # i 没有访问过
                email_set = set()  # 用于收集 DFS 中访问到的邮箱地址
                dfs(i)
                ans.append([accounts[i][0]] + sorted(email_set))
        return ans
```

* [sol-Java]

```java
class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        Map<String, List<Integer>> emailToIdx = new HashMap<>();
        for (int i = 0; i < accounts.size(); i++) {
            for (int k = 1; k < accounts.get(i).size(); k++) {
                emailToIdx.computeIfAbsent(accounts.get(i).get(k), x -> new ArrayList<>()).add(i);
            }
        }

        List<List<String>> ans = new ArrayList<>();
        boolean[] vis = new boolean[accounts.size()];
        Set<String> emailSet = new HashSet<>(); // 用于收集 DFS 中访问到的邮箱地址
        for (int i = 0; i < accounts.size(); i++) {
            if (vis[i]) {
                continue;
            }
            emailSet.clear();
            dfs(i, accounts, emailToIdx, vis, emailSet);

            List<String> res = new ArrayList<>(emailSet);
            Collections.sort(res);
            res.add(0, accounts.get(i).get(0));

            ans.add(res);
        }
        return ans;
    }

    private void dfs(int i, List<List<String>> accounts, Map<String, List<Integer>> emailToIdx, boolean[] vis, Set<String> emailSet) {
        vis[i] = true;
        for (int k = 1; k < accounts.get(i).size(); k++) {
            String email = accounts.get(i).get(k);
            if (emailSet.contains(email)) {
                continue;
            }
            emailSet.add(email);
            for (int j : emailToIdx.get(email)) { // 遍历所有包含该邮箱地址的账户下标 j
                if (!vis[j]) { // j 没有访问过
                    dfs(j, accounts, emailToIdx, vis, emailSet);
                }
            }
        }
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        unordered_map<string, vector<int>> email_to_idx;
        for (int i = 0; i < accounts.size(); i++) {
            for (int k = 1; k < accounts[i].size(); k++) {
                email_to_idx[accounts[i][k]].push_back(i);
            }
        }

        unordered_set<string> email_set; // 用于收集 DFS 中访问到的邮箱地址
        vector<int> vis(accounts.size());
        auto dfs = [&](auto&& dfs, int i) -> void {
            vis[i] = true;
            for (int k = 1; k < accounts[i].size(); k++) {
                string& email = accounts[i][k];
                if (email_set.contains(email)) {
                    continue;
                }
                email_set.insert(email);
                for (int j : email_to_idx[email]) { // 遍历所有包含该邮箱地址的账户下标 j
                    if (!vis[j]) { // j 没有访问过
                        dfs(dfs, j);
                    }
                }
            }
        };

        vector<vector<string>> ans;
        for (int i = 0; i < vis.size(); i++) {
            if (vis[i]) {
                continue;
            }
            email_set.clear();
            dfs(dfs, i);

            vector<string> res = {accounts[i][0]};
            res.insert(res.end(), email_set.begin(), email_set.end());
            sort(res.begin() + 1, res.end());

            ans.push_back(res);
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func accountsMerge(accounts [][]string) (ans [][]string) {
    emailToIdx := map[string][]int{}
    for i, account := range accounts {
        for _, email := range account[1:] {
            emailToIdx[email] = append(emailToIdx[email], i)
        }
    }

    vis := make([]bool, len(accounts))
    emailSet := map[string]struct{}{} // 用于收集 DFS 中访问到的邮箱地址
    var dfs func(int)
    dfs = func(i int) {
        vis[i] = true
        for _, email := range accounts[i][1:] {
            if _, has := emailSet[email]; has {
                continue
            }
            emailSet[email] = struct{}{}
            for _, j := range emailToIdx[email] { // 遍历所有包含该邮箱地址的账户下标 j
                if !vis[j] { // j 没有访问过
                    dfs(j)
                }
            }
        }
    }

    for i, b := range vis {
        if b {
            continue
        }
        clear(emailSet)
        dfs(i)

        res := make([]string, 1, len(emailSet)+1)
        res[0] = accounts[i][0]
        for email := range emailSet {
            res = append(res, email)
        }
        slices.Sort(res[1:])

        ans = append(ans, res)
    }
    return ans
}
```

* [sol-JavaScript]

```js
var accountsMerge = function(accounts) {
    const emailToIdx = new Map();
    for (let i = 0; i < accounts.length; i++) {
        for (let j = 1; j < accounts[i].length; j++) {
            const email = accounts[i][j];
            if (!emailToIdx.has(email)) {
                emailToIdx.set(email, []);
            }
            emailToIdx.get(email).push(i);
        }
    }

    const vis = Array(accounts.length).fill(false);
    const emailSet = new Set(); // 用于收集 DFS 中访问到的邮箱地址
    function dfs(i) {
        vis[i] = true;
        for (let k = 1; k < accounts[i].length; k++) {
            const email = accounts[i][k];
            if (emailSet.has(email)) {
                continue;
            }
            emailSet.add(email);
            for (const j of emailToIdx.get(email)) { // 遍历所有包含该邮箱地址的账户下标 j
                if (!vis[j]) { // j 没有访问过
                    dfs(j);
                }
            }
        }
    }

    const ans = [];
    for (let i = 0; i < vis.length; i++) {
        if (!vis[i]) { // i 没有访问过
            emailSet.clear();
            dfs(i);
            ans.push([accounts[i][0], ...[...emailSet].sort()]);
        }
    }
    return ans;
};
```

* [sol-Rust]

```rust
use std::collections::{HashMap, HashSet};

impl Solution {
    pub fn accounts_merge(accounts: Vec<Vec<String>>) -> Vec<Vec<String>> {
        let mut email_to_idx = HashMap::new();
        for (i, account) in accounts.iter().enumerate() {
            for email in account.iter().skip(1) {
                email_to_idx.entry(email.clone()).or_insert_with(Vec::new).push(i);
            }
        }

        fn dfs(i: usize, accounts: &Vec<Vec<String>>, email_to_idx: &HashMap<String, Vec<usize>>, vis: &mut Vec<bool>, email_set: &mut HashSet<String>) {
            vis[i] = true;
            for email in accounts[i].iter().skip(1) {
                if email_set.contains(email) {
                    continue;
                }
                email_set.insert(email.clone());
                for &j in email_to_idx.get(email).unwrap() { // 遍历所有包含该邮箱地址的账户下标 j
                    if !vis[j] { // j 没有访问过
                        dfs(j, accounts, email_to_idx, vis, email_set);
                    }
                }
            }
        }

        let mut ans = vec![];
        let mut vis = vec![false; accounts.len()];
        for (i, account) in accounts.iter().enumerate() {
            if vis[i] {
                continue;
            }
            let mut email_set = HashSet::new(); // 用于收集 DFS 中访问到的邮箱地址
            dfs(i, &accounts, &email_to_idx, &mut vis, &mut email_set);

            let mut res = email_set.into_iter().collect::<Vec<_>>();
            res.sort_unstable();
            res.insert(0, account[0].clone());

            ans.push(res);
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(L\log L)$，其中 $L$ 是 $accounts$ 中所有字符串的长度之和。瓶颈在排序上。
- 空间复杂度：$\mathcal{O}(L)$。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心算法（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
